#!/usr/bin/env python

from __future__ import absolute_import
from __future__ import print_function
from cfbeautifier.color import Color
from cfbeautifier import beautifier
from cfbeautifier import util
import os
import sys

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', action = 'count', default = 0, dest = 'verbose',
                        help = "Verbose mode, repeat for more detail")
    parser.add_argument("-o", "--out", dest = "output_path",
                        help = "Output file. Cannot be used with multiple input files",
                        metavar = "FILE")
    parser.add_argument("--stdout", action = "store_true", dest = "use_stdout",
                        help = "Use stdout instead of output file or overwriting original")
    parser.add_argument("-c", "--keep-empty", action = "store_true",
                        dest = "keeps_empty_promise_types", help = "Keep empty promise types")
    parser.add_argument("-n", "--keep-order", action = "store_true",
                        dest = "keeps_promise_type_order",
                        help = "Does not sort promise types to evaluation order")
    parser.add_argument("-p", "--page-width",
                        type = int,
                        dest = "page_width",
                        help = "Page width, default %d" % beautifier.Options().page_width)
    parser.add_argument("-l", "--line-endings",
                        dest = "line_endings",
                        help = "Line endings: 'windows', 'unix', 'detect'. Default 'detect'")
    parser.add_argument("input_paths", nargs = "+", help = "Input path")
    args = parser.parse_args()

    if not args.input_paths:
        raise AssertionError("No path given")

    paths = []
    for input_path in args.input_paths:
        if os.path.isdir(input_path):
            for root, sub_folders, files in os.walk(input_path):
                paths.extend(map(lambda name: os.path.join(root, name),
                             filter(lambda name: name.endswith(".cf"), files)))
        elif not os.path.isfile(input_path):
            print("Cannot find file '%s'" % input_path)
            exit(-1)
        else:
            paths.append(input_path)

    if args.output_path and 1 < len(paths):
        print("output_path with multiple input paths is not supported.")
        exit(-1)

    def print_verbose(string, **kwargs):
        if args.verbose != 0:
            print(string, **kwargs)
            sys.stdout.flush()

    # beautifier will detect line endings
    options = beautifier.Options()
    if args.keeps_empty_promise_types:
        options.removes_empty_promise_types = False
    if args.keeps_promise_type_order:
        options.sorts_promise_types_to_evaluation_order = False
    if args.page_width:
        options.page_width = args.page_width
    if args.line_endings:
        if args.line_endings == "windows":
            options.line_endings = "\r\n"
        elif args.line_endings == "unix":
            options.line_endings = "\n"
        elif not args.line_endings == "detect":
            print("Invalid line endings: '%s'" % args.line_endings)
            exit(-1)

    for path in paths:
        print_verbose("Processing... " + path, end = "")
        input = util.string_from_file(path)
        output = beautifier.beautified_string(input, options)
        if args.use_stdout:
            print(output)
        elif input != output:
            print_verbose(Color.green(" -> Beautified"))
            with open(args.output_path or path, 'w') as file:
                file.write(output.encode("utf-8"))
        else:
            print_verbose("") # add line feed
